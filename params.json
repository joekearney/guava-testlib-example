{"name":"guava-testlib-example","tagline":"An example of how to write test suites with Guava Testlib","body":"Guava Testlib was written to test collections implementations exhaustively. It's general enough to allow tests to be written for any interface and have them run against many different implementations. It generates the cross product (filtered according to features) of tests and implementations and puts them in a nice hierarchy that looks great in Eclipse.\r\n\r\nTests can be annotated with `Feature`s that correspond to differences in implementations of the interface specification &ndash; the same set of tests can be used to test mutable and immutable collections, for example, and the framework will decide which tests to add to which suite.\r\n\r\nThis project shows a simple and contrived example of how to set up these tests. We have a `Calculator` interface and various implementations that support some of the operations for some of the parameters.\r\n\r\n***\r\n\r\n# What are the components?\r\n\r\n* `FeatureSpecificTestSuiteBuilder` &ndash; this creates the test suite. Extend this, pass it a subject generator and call `createTestSuite`. This is where the set of tester classes is declared.\r\n* `TestSubjectGenerator` &ndaash; this is just a supplier of your implementation.\r\n* `AbstractTester` &ndash; extend this to provide actual tests. Test methods should be JUnit 3 style tests, not using `@Test` annotations. This class provides access to the subject generator. You might also want an abstract subclass fro m which your test cases extend if you want to give default assertion methods, for example.\r\n\r\n# Let's get started\r\n\r\nWe'll start with a really simple calculator interface. We can consider an implementation that uses `BigDecimal` to make accurate calculations, and a strict integer calculator that doesn't know about decimals and throws if passed anything other than an `Integer`.\r\n\r\n```java\r\npublic interface Calculator {\r\n\tdefault Number add(Number a, Number b) { throw new UnsupportedOperationException(); }\r\n\tdefault Number multiply(Number a, Number b) { throw new UnsupportedOperationException(); }\r\n\t\r\n\t/** Converts some useful classes of {@link Number} to {@link BigDecimal}. */\r\n\tpublic static BigDecimal toBigDecimal(Number num) { ... }\r\n}\r\n```\r\n\r\nTag [`01-basic-code`](https://github.com/joekearney/guava-testlib-example/tree/01-basic-code) provides first basic implementations of our `Calculator` API. Tag [`02-basic-testlib`](https://github.com/joekearney/guava-testlib-example/tree/02-basic-testlib) adds the basics of the test framework. In particular, the test suite builder:\r\n\r\n```java\r\npublic class CalculatorTestSuiteBuilder extends\r\n      FeatureSpecificTestSuiteBuilder<CalculatorTestSuiteBuilder, CalculatorTestSubjectGenerator> {\r\n\t@Override protected List<Class<? extends AbstractTester>> getTesters() {\r\n\t\treturn ImmutableList.<Class<? extends AbstractTester>>of();\r\n\t}\r\n\tpublic static CalculatorTestSuiteBuilder using(CalculatorTestSubjectGenerator generator) {\r\n\t\treturn new CalculatorTestSuiteBuilder().usingGenerator(generator);\r\n\t}\r\n}\r\n```\r\n\r\nAs soon as we write any test classes we'll add those classes to the list returned from `getTesters`.\r\n\r\n# Writing a first test\r\n\r\nTo start with, let's write a superclass for our test cases, which can contain the common assertions and functions that we'll want to use.\r\n\r\n```java\r\npublic class CalculatorTester extends AbstractTester<CalculatorTestSubjectGenerator> {\r\n\tprotected static void assertEqualsExact(Number actual, long expected) {\r\n\t\tassertEqualsExact(toBigDecimal(actual), new BigDecimal(expected));\r\n\t}\r\n\tprotected static void assertEqualsExact(Number actual, double expected) {\r\n\t\tassertEqualsExact(toBigDecimal(actual), new BigDecimal(expected));\r\n\t}\r\n\tprotected static void assertEqualsExact(BigDecimal actual, BigDecimal expected) {\r\n\t\tassertTrue(\"Expected [\" + expected + \"] but got [\" + actual + \"]\",\r\n\t\t\t\tactual.compareTo(expected) == 0);\r\n\t}\r\n}\r\n```\r\n\r\nWe'll divide the test cases by the separate features of the Calculator that we're testing.\r\n\r\n```java\r\npublic class AddTester extends CalculatorTester {\r\n\tpublic void testAddZero() throws Exception {\r\n\t\tNumber result = getSubjectGenerator().createTestSubject().add(0, 0);\r\n\t\tassertEqualsExact(result, 0);\r\n\t}\r\n}\r\n```\r\n\r\n# Running the tests\r\n\r\nThe builder builds the test suite for a subject generator that you provide. Here, all the generator has to do is to supply an instance the calculator.\r\n\r\n```java\r\npublic class TestsForCalculators {\r\n\tpublic static Test suite() {\r\n\t\tTestSuite suite = new TestSuite(\"Calculators\");\r\n\r\n\t\tsuite.addTest(CalculatorTestSuiteBuilder.using(new CalculatorTestSubjectGenerator() {\r\n\t\t\t\t@Override public Calculator createTestSubject() {\r\n\t\t\t\t\treturn new BigDecimalCalculator();\r\n\t\t\t\t}})\r\n\t\t\t.named(\"BigDecimalCalculator\")\r\n\t\t\t.createTestSuite());\r\n\t\t\r\n\t\treturn suite;\r\n\t}\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}